From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Reito <carolwolfking@gmail.com>
Date: Fri, 19 Apr 2024 11:46:47 +0800
Subject: Remove DXGI GMB keyed-mutex

This CL is only for reference for a vendor specific change. It is kept for rebasing.

On CEF/electron, FrameSinkVideoCapturer is used in GPU accelerated OSR, and it can be faster
if we remove the mutex on the shared resource for Windows. This patch is not mandatory, but
will be nice to be patched for performance gain with no cost.

For reason please see: https://crrev.com/c/5465148

Change-Id: Id90acd587f17acd228ae7cb5ef93005eb8388b80

diff --git a/gpu/ipc/service/gpu_memory_buffer_factory_dxgi.cc b/gpu/ipc/service/gpu_memory_buffer_factory_dxgi.cc
index 2096591596a26464ab8f71a399ccb16a04edfd59..9eb966b3ddc3551d6beeff123071b2c99a576620 100644
--- a/gpu/ipc/service/gpu_memory_buffer_factory_dxgi.cc
+++ b/gpu/ipc/service/gpu_memory_buffer_factory_dxgi.cc
@@ -179,7 +179,8 @@ gfx::GpuMemoryBufferHandle GpuMemoryBufferFactoryDXGI::CreateGpuMemoryBuffer(
   // so make sure that the usage is one that we support.
   DCHECK(usage == gfx::BufferUsage::GPU_READ ||
          usage == gfx::BufferUsage::SCANOUT ||
-         usage == gfx::BufferUsage::SCANOUT_CPU_READ_WRITE)
+         usage == gfx::BufferUsage::SCANOUT_CPU_READ_WRITE ||
+         usage == gfx::BufferUsage::SCANOUT_VEA_CPU_READ)
       << "Incorrect usage, usage=" << gfx::BufferUsageToString(usage);
 
   D3D11_TEXTURE2D_DESC desc = {
@@ -193,7 +194,9 @@ gfx::GpuMemoryBufferHandle GpuMemoryBufferFactoryDXGI::CreateGpuMemoryBuffer(
       D3D11_BIND_SHADER_RESOURCE | D3D11_BIND_RENDER_TARGET,
       0,
       D3D11_RESOURCE_MISC_SHARED_NTHANDLE |
-          D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX};
+          static_cast<UINT>(usage == gfx::BufferUsage::SCANOUT_VEA_CPU_READ
+                                ? D3D11_RESOURCE_MISC_SHARED
+                                : D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX)};
 
   Microsoft::WRL::ComPtr<ID3D11Texture2D> d3d11_texture;
 
diff --git a/media/video/renderable_gpu_memory_buffer_video_frame_pool.cc b/media/video/renderable_gpu_memory_buffer_video_frame_pool.cc
index 208d048ee68fd92d1fa7b5e8ad79e02e29b8be40..9f40a09020f2f33457d37176790480cb5493bbbc 100644
--- a/media/video/renderable_gpu_memory_buffer_video_frame_pool.cc
+++ b/media/video/renderable_gpu_memory_buffer_video_frame_pool.cc
@@ -205,7 +205,7 @@ gfx::Size GetBufferSizeInPixelsForVideoPixelFormat(
 bool FrameResources::Initialize() {
   auto* context = pool_->GetContext();
 
-  constexpr gfx::BufferUsage kBufferUsage =
+  gfx::BufferUsage buffer_usage =
 #if BUILDFLAG(IS_MAC) || BUILDFLAG(IS_CHROMEOS)
       gfx::BufferUsage::SCANOUT_VEA_CPU_READ
 #else
@@ -225,12 +225,29 @@ bool FrameResources::Initialize() {
   const bool is_mappable_si_enabled = base::FeatureList::IsEnabled(
       kUseMappableSIForRenderableGpuMemoryBufferVideoFramePool);
   if (!is_mappable_si_enabled) {
+#if BUILDFLAG(IS_WIN)
+    // For CEF OSR feature, currently there's no other place in chromium use RGBA.
+    // If the format is RGBA, currently CEF do not write to the texture anymore
+    // once the GMB is returned from CopyRequest. So there will be no race
+    // condition on that texture. We can request a GMB without a keyed mutex to
+    // accelerate and probably prevent some driver deadlock.
+    if (format_ == PIXEL_FORMAT_ARGB || format_ == PIXEL_FORMAT_ABGR) {
+      // This value is 'borrowed', SCANOUT_VEA_CPU_READ is probably invalid
+      // cause there's no real SCANOUT on Windows. We simply use this enum as a
+      // flag to disable mutex in the GMBFactoryDXGI because this enum is also
+      // used above in macOS and CrOS for similar usage (claim no other one will
+      // concurrently use the resource).
+      // https://chromium-review.googlesource.com/c/chromium/src/+/5302103
+      buffer_usage = gfx::BufferUsage::SCANOUT_VEA_CPU_READ;
+    }
+#endif
+
     gpu_memory_buffer_ = context->CreateGpuMemoryBuffer(
-        buffer_size_in_pixels, buffer_format, kBufferUsage);
+        buffer_size_in_pixels, buffer_format, buffer_usage);
     if (!gpu_memory_buffer_) {
       LOG(ERROR) << "Failed to allocate GpuMemoryBuffer for frame: coded_size="
                  << coded_size_.ToString()
-                 << ", usage=" << static_cast<int>(kBufferUsage);
+                 << ", usage=" << static_cast<int>(buffer_usage);
       return false;
     }
 
@@ -264,7 +281,7 @@ bool FrameResources::Initialize() {
 
   if (is_mappable_si_enabled) {
     shared_image_ = context->CreateSharedImage(
-        buffer_size_in_pixels, kBufferUsage, si_format, color_space_,
+        buffer_size_in_pixels, buffer_usage, si_format, color_space_,
         kTopLeft_GrSurfaceOrigin, kPremul_SkAlphaType, kSharedImageUsage,
         sync_token_);
   } else {
